name: CICD-Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:lts
        env:
          MYSQL_DATABASE: donnees
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent" 
          --health-start-period=30s 
          --health-retries=5 
          --health-timeout=10s

    env:
      SKIP_TESTS: 'false'
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/donnees
      SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_USER }}
      SPRING_DATASOURCE_PASSWORD:  ${{ secrets.MYSQL_PASSWORD }}
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: com.mysql.cj.jdbc.Driver

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 18
        uses: actions/setup-java@v4
        with:
          java-version: '18'
          distribution: 'temurin'
          cache: maven

      - name: Vérification de la structure du projet
        run: ls -la backend

      - name: Install Dependencies
        working-directory: backend
        run: mvn clean install -DskipTests

      - name: Run Backend Tests
        if: env.SKIP_TESTS != 'true'
        working-directory: backend
        run: mvn clean install -DskipTests
        # run: |
        #   mvn clean
        #   mvn test -X 
        #   echo "Tests terminés avec succès"

      - name: Build Backend Docker Image
        run: |
         docker build -t  ${{ secrets.DOCKER_USERNAME }}/spring-boot-backend:v1 ./backend
         docker images

  build-frontend:
    runs-on: ubuntu-latest
    env:
      SKIP_TESTS: 'false'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: npm-

      - name: Install Dependencies
        working-directory: frontend
        run: npm install

      - name: Build Frontend
        working-directory: frontend
        run: npm run build --configuration=production
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/

      - name: Run Frontend Test
        if: env.SKIP_TESTS != 'true'
        working-directory: frontend
        run: npm test -- --watch=false --browsers=ChromeHeadless

      - name: Build Frontend Docker Image
        run: |
         docker build -t  ${{ secrets.DOCKER_USERNAME }}/angular-frontend:v1 ./frontend
         docker images


  push-docker-images:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to dockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Vérification des images docker 
        run: docker images
    
      - name: Push frontend image
        run: docker push  ${{ secrets.DOCKER_USERNAME }}/angular-frontend:v1 

      - name: Push backend image
        run: docker push  ${{ secrets.DOCKER_USERNAME }}/spring-boot-backend:v1 
      

