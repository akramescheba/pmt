name: CICD-Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:lts
        env:
          MYSQL_DATABASE: donnees
          MYSQL_USER: usr
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3308:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-start-period=30s
          --health-retries=5
          --health-timeout=10s

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Attendre que MySQL soit prêt
        run: |
          for i in {1..30}; do
            mysql -h 127.0.0.1 -uusr -p${{ secrets.MYSQL_PASSWORD }} -e "SELECT 1" && exit 0
            echo "Attente de MySQL..."
            sleep 5
          done
          echo "MySQL ne s'est pas lancé à temps." && exit 1

      - name: Build Backend Image
        run: |
          docker build -t meschebajordy/pmt-backend:v1 ./backend
          docker images

  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: npm-

      - name: Install Dependencies
        working-directory: frontend
        run: npm install

      - name: Build Frontend
        working-directory: frontend
        run: npm run build --configuration=production

      - name: Build Frontend Docker Image
        run: |
          docker build -t meschebajordy/pmt-frontend:v1 ./frontend
          docker images

  push-docker-images:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Backend Image
        run: docker push meschebajordy/pmt-backend:v1

      - name: Push Frontend Image
        run: docker push meschebajordy/pmt-frontend:v1

  deploy:
    runs-on: ubuntu-latest
    needs: [push-docker-images]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Pull Docker Images
        run: |
          docker pull meschebajordy/pmt-backend:v1
          docker pull meschebajordy/pmt-frontend:v1

      - name: Run Docker Compose
        run: docker-compose up -d

      - name: Vérification des logs backend
        run: docker logs $(docker ps -q --filter "name=backend")

      - name: Vérification des logs frontend
        run: docker logs $(docker ps -q --filter "name=frontend")
