name: CICD-Pipeline 

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:lts
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: donnees
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-start-period=60s
          --health-retries=5
          --health-timeout=10s

    env:
      SKIP_TESTS: 'false'
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/donnees
      SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_USER }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: com.mysql.cj.jdbc.Driver

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Installer les dépendances (Docker Compose & Netcat)
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose netcat-openbsd

      - name: Vérification de la structure du projet
        run: ls -la

      # Démarrer l'application avec Docker Compose pour les tests
      - name: Démarrer les services avec Docker Compose
        run: |
          docker-compose up -d
          sleep 10  # Attente du démarrage des services

      - name: Vérifier si MySQL est accessible
        run: |
          for i in {1..30}; do
            nc -z localhost 3306 && echo "MySQL est prêt !" && exit 0
            echo "Attente de MySQL..."
            sleep 5
          done
          echo "Échec : MySQL ne s'est pas lancé à temps." && exit 1

      - name: Test de connexion MySQL
        run: |
          mysql -h 127.0.0.1 -u${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "SHOW DATABASES;"

      - name: Exécuter les tests backend
        if: env.SKIP_TESTS != 'true'
        working-directory: backend
        run: mvn clean test -X

      - name: Afficher les logs des services en cas d'erreur
        if: failure()
        run: docker-compose logs

      - name: Arrêter et nettoyer les services
        if: always()
        run: docker-compose down

  push-docker-images:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Construire et pousser les images avec Docker Compose
        run: |
          docker-compose build
          docker-compose push

  deploy:
    runs-on: ubuntu-latest
    needs: [push-docker-images]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Déploiement sur le serveur distant via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /chemin/de/ton/projet
            git pull origin main
            docker-compose pull
            docker-compose up -d --build
