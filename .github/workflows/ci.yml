name: CICD-Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    env:
      SKIP_TESTS: 'false'
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/donnees
      SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_USER }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}

    steps:
      - name:  Checkout Repository
        uses: actions/checkout@v4

      - name:  Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

   
      ##  BACKEND - BUILD & TEST
 
      - name: Build Backend
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/pmt-backend:v1 ./backend

      - name:  Run Backend Tests
        if: env.SKIP_TESTS != 'true'
        working-directory: backend
        run: mvn test

      - name:  V√©rification des tests backend
        if: failure()
        run: |
          echo "Les tests backend ont √©chou√©, arr√™t du pipeline."
          exit 1

      
      ##  FRONTEND - BUILD & TEST

      - name: üèó Build Frontend
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/pmt-frontend:v1 ./frontend

      - name:  Run Frontend Tests
        if: env.SKIP_TESTS != 'true'
        working-directory: frontend
        run: npm test -- --watch=false --browsers=ChromeHeadless

      - name: üõ† V√©rification des tests frontend
        if: failure()
        run: |
          echo "Les tests frontend ont √©chou√©, arr√™t du pipeline."
          exit 1

  
      ##  PUSH TO DOCKER HUB
 
      - name:  Push Backend Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/pmt-backend:v1

      - name:  Push Frontend Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/pmt-frontend:v1

  deploy:
    runs-on: ubuntu-latest
    needs: build-test-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name:  Checkout Repository
        uses: actions/checkout@v4

      - name:  Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    
      ##  D√âPLOIEMENT AVEC DOCKER-COMPOSE
 
      - name:  Lancer docker-compose
        run: |
          docker-compose down
          docker-compose pull
          docker-compose up -d

      - name:  V√©rifier l'√©tat des services
        run: docker ps -a

   
      ##  TESTER LES SERVICES

      - name:  V√©rifier MySQL
        run: |
          for i in {1..30}; do
            nc -z mysql-db 3306 && echo "MySQL est pr√™t !" && exit 0
            echo "Attente de MySQL..."
            sleep 5
          done
          echo "√âchec : MySQL ne s'est pas lanc√© √† temps." && exit 1

      - name:  V√©rifier les logs backend
        run: docker logs $(docker ps -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/pmt-backend:v1)

      - name: üîé V√©rifier les logs frontend
        run: docker logs $(docker ps -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/pmt-frontend:v1)
